/*CSS file for hello/static/hello*/

* { /*Makes navbar run from border to border of display*/
    box-sizing: border-box;
}

html, body {
    margin: 0;
    padding: 0;
    width: 100%;
}

.message {
    font-weight: 600;
    color: blue;
}

.navbar {
    background-color: #a2a2a2;
    font-size: 1em;
    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    color: white;
    padding: 8px 5px 8px 5px;
    margin-right: 1px;
    width: 100%;
}

.navbar a {
    text-decoration: none;
    color: inherit;
}

.navbar-brand {
    font-size: 1.2em;
    font-weight: 600;
}

.navbar-item {
    font-variant: small-caps;
    margin-left: 20px;
}

.body-content {
    padding: 5px;
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_PROCESSES 10
#define DISPATCHER_PID 6787
#define DISPATCHER_PRIORITY 0
#define DISPATCHER_TIME 4
#define PROCESS_TIME 5

typedef struct {
    int pid;
    char processName[20];
    int priority;
    int runTime;
    int remainingTime;
} Process;

Process processes[MAX_PROCESSES];
int processCount = 0;

void addProcess(char *name, int priority, int runTime) {
    processes[processCount].pid = processCount + 1001; // Start PIDs from 1001 for clarity
    strncpy(processes[processCount].processName, name, sizeof(processes[processCount].processName) - 1);
    processes[processCount].priority = priority;
    processes[processCount].runTime = runTime;
    processes[processCount].remainingTime = runTime;
    processCount++;
}

// Function to compare process priorities for sorting
int comparePriority(const void *a, const void *b) {
    const Process *processA = (const Process *)a;
    const Process *processB = (const Process *)b;
    return processA->priority - processB->priority;
}

void simulateExecution() {
    printf("PROCESSNAME\t\tPID\tPRIORITY\tREMAININGTIME\n");
    // Sort processes array based on priority before simulation
    qsort(processes, processCount, sizeof(Process), comparePriority);
    for (int i = 0; i < processCount; i++) {
        int initialRemainingTime = processes[i].remainingTime;
        while (processes[i].remainingTime >= 0) {
            // Simulate each second of process execution
            if (processes[i].remainingTime != initialRemainingTime) {
                printf("%-16s\t%d\t\t%d\t\t\t%d\n", processes[i].processName, processes[i].pid, processes[i].priority, processes[i].remainingTime);
            }
            processes[i].remainingTime--;
            
            // Check if it's time for the dispatcher
            if (processes[i].remainingTime >= 0 && processes[i].remainingTime % PROCESS_TIME == 0) {
                // Simulate dispatcher activity for DISPATCHER_TIME seconds
                for (int j = 0; j < DISPATCHER_TIME; j++) {
                    printf("DISPATCHER\t\t%d\t\t%d\t\t\t%d\n", DISPATCHER_PID, DISPATCHER_PRIORITY, DISPATCHER_TIME - j - 1);
                }
            }
        }
    }
}

int main() {
    char input[100];
    printf("Enter the process details or 'Q' to start execution:\n");
    while (processCount < MAX_PROCESSES) {
        printf("Process %d: ", processCount + 1);
        fgets(input, sizeof(input), stdin);
        if (strcmp(input, "Q\n") == 0 || strcmp(input, "q\n") == 0) {
            break; // Correctly handle 'Q' to proceed to execution
        }
        char name[20];
        int priority, runTime;
        if (sscanf(input, "%19s %d %d", name, &priority, &runTime) == 3) {
            addProcess(name, priority, runTime);
        } else {
            printf("Invalid format. Please use 'PROCESSNAME PRIORITY RUNTIME':\n");
        }
    }

    simulateExecution(); // Proceed to simulation after 'Q' or max processes

    return 0;
}
